package
{
	import flash.system.fscommand;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.UncaughtErrorEvent;
	import flash.text.TextField;
	import flash.utils.setTimeout;
	import flash.utils.getDefinitionByName;

	import org.flexunit.async.AsyncLocator;
	import org.flexunit.internals.runners.statements.ExpectAsync;
	import org.flexunit.runner.FlexUnitCore;
	import org.flexunit.runner.Request;
	import org.flexunit.listeners.CIListener;


	/*@IMPORTS@*/

	public class TestRunner extends Sprite
	{
		private var textField:TextField;

		public function TestRunner()
		{
			setTimeout(runTests, 0);
		}

		private function trace(string:String):void
		{
		    if (!textField) return;
			textField.width = this.stage.stageWidth;
			textField.height = this.stage.stageHeight;
			textField.text += string + "\n";
		}

		public function runTests() : void
		{
		    try { getDefinitionByName("com.akamon.evo3flash.display.StageReference").setRoot(this); } catch (e:*) { trace(e); }

			loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);

			this.addChild(textField = new TextField());
			textField.textColor = 0xFF000000;
			trace('Running tests!');

			setTimeout(function():void {
				fscommand("quit");
			}, 10 * 60 * 1000);

            var tests:Array = [ /*@CLASSES@*/ ];

            trace("Tests: " + tests.length);
            //if (tests.length == 0) tests.push(SampleTestClass);

            //for each (var testClass:Class in tests) trace('Test: ' + testClass);

			var core:FlexUnitCore = new FlexUnitCore();
			core.addListener(new org.flexunit.listeners.CIListener(/*@PORT@*/)); // CIListener
			var request:Request = Request.qualifyClasses.apply(null, tests);
			core.run(request);
		}

		private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
		{
		    try { trace('uncaughtErrorHandler(' + event.error + ')'); } catch (e:*) { }
		    try {
                event.stopPropagation();
                event.stopImmediatePropagation();
                event.preventDefault();

                var expectAsync:ExpectAsync = ExpectAsync(AsyncLocator.getCallableForTest(this));

                expectAsync.failOnComplete(new Event("UncaughtErrorEvent: " + event.error.toString()), {});
            } catch (e:*) {
                try { trace('uncaughtErrorHandler(' + event.error + ')'); } catch (e:*) { }
            }
		}
	}
}

/*
import org.flexunit.asserts.assertEquals;
import org.flexunit.asserts.assertTrue;

class SampleTestClass {
	[Test]
	public function demo():void {
		assertTrue(true);
	}

	[Test]
	public function demo2():void {
		assertTrue(false);
	}
}
*/
